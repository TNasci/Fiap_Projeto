name: Meu WorkFlow FIAP

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  validation_security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Checkout repository to access source code
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List files
        run: ls -R

      # Step 2: Install Trivy for security vulnerability scanning
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # Step 3: Run vulnerability scan
      - name: Run Trivy Security Scan
        run: trivy fs --exit-code 0 --no-progress --severity MEDIUM,HIGH,CRITICAL .

  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Step 3: Restore dependencies for the main project
      - name: Restore dependencies for main project
        run: dotnet restore ./LocalFriendzApi/src/LocalFriendzApi/LocalFriendzApi.csproj

      # Step 4: Build the main project
      - name: Build main project
        run: dotnet build ./LocalFriendzApi/src/LocalFriendzApi/LocalFriendzApi.csproj --configuration Release --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Step 1 Checkout Repository
      uses: actions/checkout@v4

    - name: Step 2 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Step 3 Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install docker-compose -y

    # Run services using Docker Compose
    - name: Step 4 Run Docker Compose
      run: docker-compose up -d

    # Ensure that services are healthy before proceeding
    - name: Wait for PostgreSQL and PgBouncer to be ready
      run: |
        for i in {1..30}; do
          if docker-compose exec db pg_isready -U postgres && docker-compose exec pgbouncer nc -z pgbouncer 6432; then
            echo "Services are ready"
            break
          fi
          echo "Waiting for db and pgbouncer to be ready..."
          sleep 5
        done

    # Lista os containers que estão rodando
    - name: List running Docker containers
      run: docker-compose ps

    # Run your .NET tests (ensure connection string uses the correct hostname)
    - name: Run tests
      env:
        ConnectionStrings__Postgres: "Host=pgbouncer;Port=6432;Username=postgres;Password=Teste@123;Database=DB_FIAP_ARQUITETO"
      run: dotnet test ./LocalFriendzApi/src/LocalFriendzApi.Test/LocalFriendzApi.IntegrationTests.csproj --configuration Release --no-build --verbosity detailed

    # Tear down Docker containers after the test
    - name: Tear down Docker Compose
      run: docker-compose down
    # steps:        
    #   - name: Step 1 Checkout Repository
    #     uses: actions/checkout@v4

    #   - name: Step 2 Setup .NET
    #     uses: actions/setup-dotnet@v4
    #     with:
    #       dotnet-version: 8.0.x

    #   # Lista os containers que estão rodando
    #   - name: mostra containers
    #     run: |
    #       docker container ls
          
    #   - name: ping pgbouncer
    #     run: |
    #       nc -vz pgbouncer 6432

      # - name: Restore dependencies for test project
      #   run: dotnet restore ./LocalFriendzApi/src/LocalFriendzApi.Test/LocalFriendzApi.IntegrationTests.csproj

      # - name: Build Test Project
      #   run: dotnet build ./LocalFriendzApi/src/LocalFriendzApi.Test/LocalFriendzApi.IntegrationTests.csproj --configuration Release --no-restore

      # - name: Run tests
      #   env:
      #     ConnectionStrings__Postgres: "Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=DB_FIAP_ARQUITETO"
      #   run: dotnet test ./LocalFriendzApi/src/LocalFriendzApi.Test/LocalFriendzApi.IntegrationTests.csproj --configuration Release --no-build --verbosity detailed
